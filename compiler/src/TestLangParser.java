
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java.util.*;
import ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class TestLangParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public TestLangParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public TestLangParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TestLangParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\002\000\002\004\006\000\002\005\003" +
    "\000\002\005\002\000\002\006\004\000\002\006\003\000" +
    "\002\007\003\000\002\007\003\000\002\010\006\000\002" +
    "\011\007\000\002\012\004\000\002\012\002\000\002\013" +
    "\007\000\002\014\003\000\002\014\003\000\002\015\004" +
    "\000\002\015\002\000\002\016\007\000\002\017\004\000" +
    "\002\017\002\000\002\020\004\000\002\021\005\000\002" +
    "\021\005\000\002\021\006\000\002\021\006\000\002\022" +
    "\005\000\002\022\002\000\002\023\003\000\002\023\002" +
    "\000\002\024\004\000\002\024\003\000\002\025\003\000" +
    "\002\025\003\000\002\026\006\000\002\027\003\000\002" +
    "\027\002\000\002\030\004\000\002\030\003\000\002\031" +
    "\007\000\002\031\010\000\002\031\010\000\002\031\007" +
    "\000\002\032\003\000\002\032\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\012\002\ufffe\004\004\007\ufffe\010\ufffe\001" +
    "\002\000\004\023\120\001\002\000\004\002\117\001\002" +
    "\000\010\002\ufff3\007\ufff3\010\ufff3\001\002\000\010\002" +
    "\uffff\007\uffff\010\uffff\001\002\000\010\002\uffee\007\011" +
    "\010\uffee\001\002\000\004\027\111\001\002\000\010\002" +
    "\ufff4\007\ufff4\010\ufff4\001\002\000\006\002\000\010\014" +
    "\001\002\000\004\027\016\001\002\000\006\002\uffef\010" +
    "\uffef\001\002\000\004\023\017\001\002\000\014\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\024\uffeb\001\002\000\014\011" +
    "\021\012\027\013\026\014\023\024\024\001\002\000\004" +
    "\030\107\001\002\000\016\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\063\024\uffdb\001\002\000\004\030\060\001\002" +
    "\000\006\002\uffed\010\uffed\001\002\000\014\011\uffec\012" +
    "\uffec\013\uffec\014\uffec\024\uffec\001\002\000\004\030\055" +
    "\001\002\000\004\030\030\001\002\000\022\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\022\uffe4\023\031\024\uffe4" +
    "\001\002\000\010\006\042\017\040\024\uffe2\001\002\000" +
    "\020\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\022\033" +
    "\024\uffd3\001\002\000\016\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\024\uffd4\001\002\000\016\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\024\uffe7\001\002\000\010\006" +
    "\uffde\017\uffde\024\uffde\001\002\000\010\006\uffe0\017\uffe0" +
    "\024\uffe0\001\002\000\010\006\uffdf\017\uffdf\024\uffdf\001" +
    "\002\000\004\021\052\001\002\000\004\024\051\001\002" +
    "\000\004\030\045\001\002\000\010\006\042\017\040\024" +
    "\uffe3\001\002\000\010\006\uffe1\017\uffe1\024\uffe1\001\002" +
    "\000\004\021\046\001\002\000\004\030\047\001\002\000" +
    "\004\022\050\001\002\000\012\005\ufff5\006\ufff5\017\ufff5" +
    "\024\ufff5\001\002\000\020\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\022\uffe5\024\uffe5\001\002\000\004\030\053" +
    "\001\002\000\004\022\054\001\002\000\010\006\uffdd\017" +
    "\uffdd\024\uffdd\001\002\000\022\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\022\uffe4\023\031\024\uffe4\001\002\000" +
    "\020\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\022\033" +
    "\024\uffd3\001\002\000\016\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\024\uffe6\001\002\000\020\011\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\022\033\024\uffd3\001\002\000" +
    "\016\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\024\uffe8" +
    "\001\002\000\016\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\024\uffd9\001\002\000\010\006\071\016\067\017\070" +
    "\001\002\000\014\011\uffea\012\uffea\013\uffea\014\uffea\024" +
    "\uffea\001\002\000\016\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\063\024\uffdc\001\002\000\016\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\024\uffda\001\002\000\004\021\104" +
    "\001\002\000\004\020\101\001\002\000\004\030\072\001" +
    "\002\000\006\020\073\021\074\001\002\000\004\030\077" +
    "\001\002\000\004\030\075\001\002\000\004\022\076\001" +
    "\002\000\016\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\024\uffd7\001\002\000\004\022\100\001\002\000\016\011" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\024\uffd6\001\002" +
    "\000\004\030\102\001\002\000\004\022\103\001\002\000" +
    "\016\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\024\uffd5" +
    "\001\002\000\004\032\105\001\002\000\004\022\106\001" +
    "\002\000\016\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\024\uffd8\001\002\000\020\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\022\033\024\uffd3\001\002\000\016\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\024\uffe9\001\002\000" +
    "\004\021\112\001\002\000\006\030\113\032\114\001\002" +
    "\000\004\022\ufff1\001\002\000\004\022\ufff0\001\002\000" +
    "\004\022\116\001\002\000\010\002\ufff2\007\ufff2\010\ufff2" +
    "\001\002\000\004\002\001\001\002\000\010\005\126\006" +
    "\042\024\ufffb\001\002\000\010\005\ufff9\006\ufff9\024\ufff9" +
    "\001\002\000\010\005\ufff8\006\ufff8\024\ufff8\001\002\000" +
    "\010\005\ufff7\006\ufff7\024\ufff7\001\002\000\010\005\126" +
    "\006\042\024\ufffc\001\002\000\004\024\132\001\002\000" +
    "\004\021\127\001\002\000\004\030\130\001\002\000\004" +
    "\022\131\001\002\000\010\005\ufff6\006\ufff6\024\ufff6\001" +
    "\002\000\010\002\ufffd\007\ufffd\010\ufffd\001\002\000\010" +
    "\005\ufffa\006\ufffa\024\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\010\002\004\003\005\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\007\001\001" +
    "\000\002\001\001\000\006\013\011\015\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\017\001\001\000\006\020\024\021\021\001\001" +
    "\000\002\001\001\000\010\027\063\030\064\031\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\031\001" +
    "\001\000\014\011\036\023\040\024\042\025\035\026\034" +
    "\001\001\000\004\032\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\036\025\043\026\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\055\001" +
    "\001\000\004\032\056\001\001\000\002\001\001\000\004" +
    "\032\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\124\006\123\007\120\010" +
    "\121\011\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\132\010\121\011\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TestLangParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TestLangParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TestLangParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public TestFile parseFile() throws Exception {
        Symbol sym = super.parse();
        return (TestFile) sym.value;
    }

    public static void main(String[] args) throws Exception {
        if (args.length == 0) {
            System.err.println("Usage: java TestLangParser <input.test>");
            System.exit(1);
        }
        StandaloneLexer lexer = new StandaloneLexer(new FileReader(args[0]));
        TestLangParser parser = new TestLangParser(lexer);
        TestFile result = parser.parseFile();

        System.out.println("Parsing complete. Generating JUnit code...");
        CodeGenerator.generate(result);
    }

    static class RequestData {
        List<Header> headers = new ArrayList<Header>();
        String body = null;
    }

    static class ConfigEntry {
        String baseUrl;
        Header header;
        ConfigEntry(String baseUrl, Header header) {
            this.baseUrl = baseUrl;
            this.header = header;
        }
    }

    static class RequestEntry {
        Header header;
        String body;
        RequestEntry(Header header, String body) {
            this.header = header;
            this.body = body;
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$TestLangParser$actions {
  private final TestLangParser parser;

  /** Constructor */
  CUP$TestLangParser$actions(TestLangParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$TestLangParser$do_action_part00000000(
    int                        CUP$TestLangParser$act_num,
    java_cup.runtime.lr_parser CUP$TestLangParser$parser,
    java.util.Stack            CUP$TestLangParser$stack,
    int                        CUP$TestLangParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TestLangParser$result;

      /* select the action based on the action number */
      switch (CUP$TestLangParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= testFile EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		TestFile start_val = (TestFile)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		RESULT = start_val;
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TestLangParser$parser.done_parsing();
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // testFile ::= optConfig variables testBlocks 
            {
              TestFile RESULT =null;
		int cfgleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-2)).left;
		int cfgright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-2)).right;
		ConfigBlock cfg = (ConfigBlock)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		List<Variable> vars = (List<Variable>)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		int testsleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int testsright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		List<TestBlock> tests = (List<TestBlock>)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		 RESULT = new TestFile(cfg, vars, tests); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("testFile",0, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // optConfig ::= configBlock 
            {
              ConfigBlock RESULT =null;
		int cfgleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int cfgright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		ConfigBlock cfg = (ConfigBlock)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		 RESULT = cfg; 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("optConfig",1, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // optConfig ::= 
            {
              ConfigBlock RESULT =null;
		 RESULT = null; 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("optConfig",1, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // configBlock ::= CONFIG LBRACE configItemsOpt RBRACE 
            {
              ConfigBlock RESULT =null;
		int cfgleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int cfgright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		ConfigBlock cfg = (ConfigBlock)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		 RESULT = cfg; 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("configBlock",2, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // configItemsOpt ::= configItems 
            {
              ConfigBlock RESULT =null;
		int cfgleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int cfgright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		ConfigBlock cfg = (ConfigBlock)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		 RESULT = cfg; 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("configItemsOpt",3, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // configItemsOpt ::= 
            {
              ConfigBlock RESULT =null;
		 RESULT = new ConfigBlock(); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("configItemsOpt",3, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // configItems ::= configItems configItem 
            {
              ConfigBlock RESULT =null;
		int cfgleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int cfgright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		ConfigBlock cfg = (ConfigBlock)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		ConfigEntry item = (ConfigEntry)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		
                 if (item.baseUrl != null) cfg.baseUrl = item.baseUrl;
                 if (item.header != null) cfg.headers.put(item.header.name, item.header.value);
                 RESULT = cfg;
              
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("configItems",4, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // configItems ::= configItem 
            {
              ConfigBlock RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		ConfigEntry item = (ConfigEntry)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		
                 ConfigBlock cfg = new ConfigBlock();
                 if (item.baseUrl != null) cfg.baseUrl = item.baseUrl;
                 if (item.header != null) cfg.headers.put(item.header.name, item.header.value);
                 RESULT = cfg;
              
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("configItems",4, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // configItem ::= baseUrlValue 
            {
              ConfigEntry RESULT =null;
		int buleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int buright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		String bu = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		 RESULT = new ConfigEntry(bu, null); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("configItem",5, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // configItem ::= headerStmt 
            {
              ConfigEntry RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		Header h = (Header)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		 RESULT = new ConfigEntry(null, h); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("configItem",5, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // baseUrlValue ::= BASE_URL EQUALS STRING SEMICOLON 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		 RESULT = s; 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("baseUrlValue",6, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // headerStmt ::= HEADER STRING EQUALS STRING SEMICOLON 
            {
              Header RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		 RESULT = new Header(k, v); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("headerStmt",7, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variables ::= variables variable 
            {
              List<Variable> RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		List<Variable> vs = (List<Variable>)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		 vs.add(v); RESULT = vs; 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variables ::= 
            {
              List<Variable> RESULT =null;
		 RESULT = new ArrayList<Variable>(); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variable ::= LET IDENTIFIER EQUALS value SEMICOLON 
            {
              Variable RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		 RESULT = new Variable(name, val); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // value ::= STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		 RESULT = s; 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // value ::= NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		 RESULT = Integer.toString(n.intValue()); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // testBlocks ::= testBlocks testBlock 
            {
              List<TestBlock> RESULT =null;
		int tbsleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int tbsright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		List<TestBlock> tbs = (List<TestBlock>)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		int tbleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		TestBlock tb = (TestBlock)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		 tbs.add(tb); RESULT = tbs; 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("testBlocks",11, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // testBlocks ::= 
            {
              List<TestBlock> RESULT =null;
		 RESULT = new ArrayList<TestBlock>(); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("testBlocks",11, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // testBlock ::= TEST IDENTIFIER LBRACE statements RBRACE 
            {
              TestBlock RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		List<Statement> stmts = (List<Statement>)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		 RESULT = new TestBlock(name, stmts); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("testBlock",12, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statements ::= statements statement 
            {
              List<Statement> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		List<Statement> ss = (List<Statement>)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		 ss.add(s); RESULT = ss; 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("statements",13, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statements ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new ArrayList<Statement>(); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("statements",13, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= httpRequest assertionsOpt 
            {
              Statement RESULT =null;
		int reqleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int reqright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		HttpRequest req = (HttpRequest)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		List<Assertion> as = (List<Assertion>)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		 if (as.isEmpty()) RESULT = req;
               else RESULT = new RequestWithAssertions(req, as);
             
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // httpRequest ::= GET STRING optSemicolon 
            {
              HttpRequest RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		 RESULT = new HttpRequest("GET", path, new ArrayList<Header>(), null); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("httpRequest",15, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // httpRequest ::= DELETE STRING optSemicolon 
            {
              HttpRequest RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		 RESULT = new HttpRequest("DELETE", path, new ArrayList<Header>(), null); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("httpRequest",15, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // httpRequest ::= POST STRING optRequestBlock optSemicolon 
            {
              HttpRequest RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-2)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-2)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-2)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		RequestData data = (RequestData)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		 RESULT = new HttpRequest("POST", path, data.headers, data.body); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("httpRequest",15, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // httpRequest ::= PUT STRING optRequestBlock optSemicolon 
            {
              HttpRequest RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-2)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-2)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-2)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		RequestData data = (RequestData)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		 RESULT = new HttpRequest("PUT", path, data.headers, data.body); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("httpRequest",15, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // optRequestBlock ::= LBRACE requestItemsOpt RBRACE 
            {
              RequestData RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		RequestData data = (RequestData)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		 RESULT = data; 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("optRequestBlock",16, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // optRequestBlock ::= 
            {
              RequestData RESULT =null;
		 RESULT = new RequestData(); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("optRequestBlock",16, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // requestItemsOpt ::= requestItems 
            {
              RequestData RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		RequestData data = (RequestData)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		 RESULT = data; 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("requestItemsOpt",17, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // requestItemsOpt ::= 
            {
              RequestData RESULT =null;
		 RESULT = new RequestData(); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("requestItemsOpt",17, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // requestItems ::= requestItems requestItem 
            {
              RequestData RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		RequestData data = (RequestData)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		RequestEntry item = (RequestEntry)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		
                 if (item.header != null) data.headers.add(item.header);
                 if (item.body != null) data.body = item.body;
                 RESULT = data;
               
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("requestItems",18, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // requestItems ::= requestItem 
            {
              RequestData RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		RequestEntry item = (RequestEntry)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		
                 RequestData data = new RequestData();
                 if (item.header != null) data.headers.add(item.header);
                 if (item.body != null) data.body = item.body;
                 RESULT = data;
               
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("requestItems",18, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // requestItem ::= headerStmt 
            {
              RequestEntry RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		Header h = (Header)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		 RESULT = new RequestEntry(h, null); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("requestItem",19, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // requestItem ::= bodyValue 
            {
              RequestEntry RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		 RESULT = new RequestEntry(null, b); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("requestItem",19, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bodyValue ::= BODY EQUALS STRING SEMICOLON 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		 RESULT = s; 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("bodyValue",20, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assertionsOpt ::= assertionsPlus 
            {
              List<Assertion> RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		List<Assertion> as = (List<Assertion>)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		 RESULT = as; 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("assertionsOpt",21, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assertionsOpt ::= 
            {
              List<Assertion> RESULT =null;
		 RESULT = new ArrayList<Assertion>(); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("assertionsOpt",21, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assertionsPlus ::= assertionsPlus assertion 
            {
              List<Assertion> RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		List<Assertion> as = (List<Assertion>)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		Assertion a = (Assertion)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		 as.add(a); RESULT = as; 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("assertionsPlus",22, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assertionsPlus ::= assertion 
            {
              List<Assertion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()).right;
		Assertion a = (Assertion)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.peek()).value;
		 ArrayList<Assertion> list = new ArrayList<Assertion>(); list.add(a); RESULT = list; 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("assertionsPlus",22, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assertion ::= EXPECT STATUS EQUALS NUMBER SEMICOLON 
            {
              Assertion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		 RESULT = new StatusAssertion(n.intValue()); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("assertion",23, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assertion ::= EXPECT HEADER STRING EQUALS STRING SEMICOLON 
            {
              Assertion RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		 RESULT = new HeaderEqualsAssertion(k, v); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("assertion",23, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-5)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assertion ::= EXPECT HEADER STRING CONTAINS STRING SEMICOLON 
            {
              Assertion RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		 RESULT = new HeaderContainsAssertion(k, v); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("assertion",23, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-5)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assertion ::= EXPECT BODY CONTAINS STRING SEMICOLON 
            {
              Assertion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-1)).value;
		 RESULT = new BodyContainsAssertion(s); 
              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("assertion",23, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.elementAt(CUP$TestLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // optSemicolon ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("optSemicolon",24, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // optSemicolon ::= 
            {
              Object RESULT =null;

              CUP$TestLangParser$result = parser.getSymbolFactory().newSymbol("optSemicolon",24, ((java_cup.runtime.Symbol)CUP$TestLangParser$stack.peek()), RESULT);
            }
          return CUP$TestLangParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$TestLangParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$TestLangParser$do_action(
    int                        CUP$TestLangParser$act_num,
    java_cup.runtime.lr_parser CUP$TestLangParser$parser,
    java.util.Stack            CUP$TestLangParser$stack,
    int                        CUP$TestLangParser$top)
    throws java.lang.Exception
    {
              return CUP$TestLangParser$do_action_part00000000(
                               CUP$TestLangParser$act_num,
                               CUP$TestLangParser$parser,
                               CUP$TestLangParser$stack,
                               CUP$TestLangParser$top);
    }
}

}
