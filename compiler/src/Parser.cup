import java.io.*;
import java_cup.runtime.*;
import java.util.*;
import ast.*;

parser code {:
    public TestFile parseFile() throws Exception {
        Symbol sym = super.parse();
        return (TestFile) sym.value;
    }

    public static void main(String[] args) throws Exception {
        if (args.length == 0) {
            System.err.println("Usage: java TestLangParser <input.test>");
            System.exit(1);
        }
        StandaloneLexer lexer = new StandaloneLexer(new FileReader(args[0]));
        TestLangParser parser = new TestLangParser(lexer);
        TestFile result = parser.parseFile();

        System.out.println("Parsing complete. Generating JUnit code...");
        CodeGenerator.generate(result);
    }

    static class RequestData {
        List<Header> headers = new ArrayList<Header>();
        String body = null;
    }

    static class ConfigEntry {
        String baseUrl;
        Header header;
        ConfigEntry(String baseUrl, Header header) {
            this.baseUrl = baseUrl;
            this.header = header;
        }
    }

    static class RequestEntry {
        Header header;
        String body;
        RequestEntry(Header header, String body) {
            this.header = header;
            this.body = body;
        }
    }
:};

terminal CONFIG, BASE_URL, HEADER, LET, TEST, GET, POST, PUT, DELETE;
terminal EXPECT, STATUS, BODY, CONTAINS, EQUALS, SEMICOLON;
terminal LBRACE, RBRACE, LPAREN, RPAREN;
terminal String IDENTIFIER, STRING, VAR_REF;
terminal Integer NUMBER;

non terminal TestFile testFile;
non terminal ConfigBlock optConfig;
non terminal ConfigBlock configBlock;
non terminal ConfigBlock configItemsOpt;
non terminal ConfigBlock configItems;
non terminal ConfigEntry configItem;
non terminal String baseUrlValue;
non terminal Header headerStmt;
non terminal List<Variable> variables;
non terminal Variable variable;
non terminal String value;
non terminal List<TestBlock> testBlocks;
non terminal TestBlock testBlock;
non terminal List<Statement> statements;
non terminal Statement statement;
non terminal HttpRequest httpRequest;
non terminal RequestData optRequestBlock;
non terminal RequestData requestItemsOpt;
non terminal RequestData requestItems;
non terminal RequestEntry requestItem;
non terminal String bodyValue;
non terminal List<Assertion> assertionsOpt;
non terminal List<Assertion> assertionsPlus;
non terminal Assertion assertion;
non terminal Object optSemicolon;

start with testFile;

testFile ::= optConfig:cfg variables:vars testBlocks:tests
            {: RESULT = new TestFile(cfg, vars, tests); :}
           ;

optConfig ::= configBlock:cfg
            {: RESULT = cfg; :}
           | /* empty */
            {: RESULT = null; :}
           ;

configBlock ::= CONFIG LBRACE configItemsOpt:cfg RBRACE
              {: RESULT = cfg; :}
             ;

configItemsOpt ::= configItems:cfg
                 {: RESULT = cfg; :}
                | /* empty */
                 {: RESULT = new ConfigBlock(); :}
                ;

configItems ::= configItems:cfg configItem:item
              {:
                 if (item.baseUrl != null) cfg.baseUrl = item.baseUrl;
                 if (item.header != null) cfg.headers.put(item.header.name, item.header.value);
                 RESULT = cfg;
              :}
             | configItem:item
              {:
                 ConfigBlock cfg = new ConfigBlock();
                 if (item.baseUrl != null) cfg.baseUrl = item.baseUrl;
                 if (item.header != null) cfg.headers.put(item.header.name, item.header.value);
                 RESULT = cfg;
              :}
             ;

configItem ::= baseUrlValue:bu
             {: RESULT = new ConfigEntry(bu, null); :}
            | headerStmt:h
             {: RESULT = new ConfigEntry(null, h); :}
            ;

baseUrlValue ::= BASE_URL EQUALS STRING:s SEMICOLON
               {: RESULT = s; :}
               ;

headerStmt ::= HEADER STRING:k EQUALS STRING:v SEMICOLON
             {: RESULT = new Header(k, v); :}
             ;

variables ::= variables:vs variable:v
            {: vs.add(v); RESULT = vs; :}
           | /* empty */
            {: RESULT = new ArrayList<Variable>(); :}
           ;

variable ::= LET IDENTIFIER:name EQUALS value:val SEMICOLON
           {: RESULT = new Variable(name, val); :}
           ;

value ::= STRING:s
        {: RESULT = s; :}
       | NUMBER:n
        {: RESULT = Integer.toString(n.intValue()); :}
       ;

testBlocks ::= testBlocks:tbs testBlock:tb
             {: tbs.add(tb); RESULT = tbs; :}
            | /* empty */
             {: RESULT = new ArrayList<TestBlock>(); :}
            ;

testBlock ::= TEST IDENTIFIER:name LBRACE statements:stmts RBRACE
            {: RESULT = new TestBlock(name, stmts); :}
           ;

statements ::= statements:ss statement:s
             {: ss.add(s); RESULT = ss; :}
            | /* empty */
             {: RESULT = new ArrayList<Statement>(); :}
            ;

statement ::= httpRequest:req assertionsOpt:as
            {: if (as.isEmpty()) RESULT = req;
               else RESULT = new RequestWithAssertions(req, as);
             :}
           ;

httpRequest ::= GET STRING:path optSemicolon
              {: RESULT = new HttpRequest("GET", path, new ArrayList<Header>(), null); :}
             | DELETE STRING:path optSemicolon
              {: RESULT = new HttpRequest("DELETE", path, new ArrayList<Header>(), null); :}
             | POST STRING:path optRequestBlock:data optSemicolon
              {: RESULT = new HttpRequest("POST", path, data.headers, data.body); :}
             | PUT STRING:path optRequestBlock:data optSemicolon
              {: RESULT = new HttpRequest("PUT", path, data.headers, data.body); :}
             ;

optRequestBlock ::= LBRACE requestItemsOpt:data RBRACE
                  {: RESULT = data; :}
                 | /* empty */
                  {: RESULT = new RequestData(); :}
                 ;

requestEntries ::= requestItemsOpt:data
                 {: RESULT = data; :}
                ;

requestItemsOpt ::= requestItems:data
                  {: RESULT = data; :}
                 | /* empty */
                  {: RESULT = new RequestData(); :}
                 ;

requestItems ::= requestItems:data requestItem:item
               {:
                 if (item.header != null) data.headers.add(item.header);
                 if (item.body != null) data.body = item.body;
                 RESULT = data;
               :}
              | requestItem:item
               {:
                 RequestData data = new RequestData();
                 if (item.header != null) data.headers.add(item.header);
                 if (item.body != null) data.body = item.body;
                 RESULT = data;
               :}
              ;

requestItem ::= headerStmt:h
              {: RESULT = new RequestEntry(h, null); :}
             | bodyValue:b
              {: RESULT = new RequestEntry(null, b); :}
             ;

bodyValue ::= BODY EQUALS STRING:s SEMICOLON
            {: RESULT = s; :}
            ;

assertionsOpt ::= assertionsPlus:as
                {: RESULT = as; :}
               | /* empty */
                {: RESULT = new ArrayList<Assertion>(); :}
               ;

assertionsPlus ::= assertionsPlus:as assertion:a
                 {: as.add(a); RESULT = as; :}
                | assertion:a
                 {: ArrayList<Assertion> list = new ArrayList<Assertion>(); list.add(a); RESULT = list; :}
                ;

assertion ::= EXPECT STATUS EQUALS NUMBER:n SEMICOLON
            {: RESULT = new StatusAssertion(n.intValue()); :}
           | EXPECT HEADER STRING:k EQUALS STRING:v SEMICOLON
            {: RESULT = new HeaderEqualsAssertion(k, v); :}
           | EXPECT HEADER STRING:k CONTAINS STRING:v SEMICOLON
            {: RESULT = new HeaderContainsAssertion(k, v); :}
           | EXPECT BODY CONTAINS STRING:s SEMICOLON
            {: RESULT = new BodyContainsAssertion(s); :}
           ;

optSemicolon ::= SEMICOLON
               | /* empty */
               ;
