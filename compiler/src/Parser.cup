package parser;

import java_cup.runtime.*;
import java.util.*;
import ast.*;

parser code {:
    public static void main(String[] args) throws Exception {
        TestLangLexer lexer = new TestLangLexer(new java.io.FileReader(args[0]));
        TestLangParser parser = new TestLangParser(lexer);
        TestFile result = (TestFile) parser.parse().value;
        
        System.out.println("Parsing complete. Generating JUnit code...");
        CodeGenerator.generate(result);
    }
:};

// Terminal symbols
terminal CONFIG, BASE_URL, HEADER, LET, TEST, GET, POST, PUT, DELETE;
terminal EXPECT, STATUS, BODY, CONTAINS, EQUALS, SEMICOLON;
terminal LBRACE, RBRACE, LPAREN, RPAREN;
terminal String IDENTIFIER, STRING, VAR_REF;
terminal Integer NUMBER;

// Non-terminal symbols
non terminal TestFile testFile;
non terminal ConfigBlock configBlock;
non terminal ConfigBlock optConfig;
non terminal String baseUrl;
non terminal ConfigBlock configNonEmpty;
non terminal List<Variable> variables;
non terminal Variable variable;
non terminal List<TestBlock> testBlocks;
non terminal TestBlock testBlock;
non terminal List<Statement> statements;
non terminal Statement statement;
non terminal HttpRequest httpRequest;
non terminal RequestBlock requestBlock;
non terminal List<Header> requestHeaders;
non terminal List<Header> configHeaders;
non terminal Header header;
non terminal String body;
non terminal List<Assertion> assertionsPlus;
non terminal Assertion assertion;
non terminal String pathOrUrl;
non terminal String value;

start with testFile;

// Grammar rules
testFile ::= optConfig:config variables:vars testBlocks:tests
            {:
                RESULT = new TestFile(config, vars, tests);
            :}
          ;

optConfig ::= configBlock:cfg
            {:
              RESULT = cfg;
            :}
           | /* empty */
            {:
              RESULT = null;
            :}
           ;

configBlock ::= CONFIG LBRACE configNonEmpty:c RBRACE
              {:
                RESULT = c;
              :}
             | CONFIG LBRACE RBRACE
              {:
                RESULT = new ConfigBlock();
              :}
             ;

configNonEmpty ::= baseUrl:bu configHeaders:hs
                 {:
                   ConfigBlock c = new ConfigBlock();
                   c.baseUrl = bu;
                   for (Header h : hs) c.headers.put(h.name, h.value);
                   RESULT = c;
                 :}
                 | configHeaders:hs baseUrl:bu
                 {:
                   ConfigBlock c = new ConfigBlock();
                   c.baseUrl = bu;
                   for (Header h : hs) c.headers.put(h.name, h.value);
                   RESULT = c;
                 :}
                 | baseUrl:bu
                 {:
                   ConfigBlock c = new ConfigBlock();
                   c.baseUrl = bu;
                   RESULT = c;
                 :}
                 | configHeaders:hs
                 {:
                   ConfigBlock c = new ConfigBlock();
                   for (Header h : hs) c.headers.put(h.name, h.value);
                   RESULT = c;
                 :}
                 ;

baseUrl ::= BASE_URL EQUALS STRING:S SEMICOLON
          {:
            RESULT = S;
          :}
         ;

/* headers for both config and request blocks are defined below with values */

variables ::= /* empty */
            {:
              RESULT = new ArrayList<Variable>();
            :}
           | variables:vs variable:v
            {:
              vs.add(v);
              RESULT = vs;
            :}
           ;

variable ::= LET IDENTIFIER:name EQUALS value:val SEMICOLON
           {:
             RESULT = new Variable(name, val);
           :}
          ;

value ::= STRING:S
        {:
          RESULT = S;
        :}
       | NUMBER:N
       {:
         RESULT = N.toString();
       :}
      ;

testBlocks ::= /* empty */
             {:
               RESULT = new ArrayList<TestBlock>();
             :}
            | testBlocks:tbs testBlock:tb
             {:
               tbs.add(tb);
               RESULT = tbs;
             :}
            ;

testBlock ::= TEST IDENTIFIER:name LBRACE statements:stmts RBRACE
            {:
              RESULT = new TestBlock(name, stmts);
            :}
           ;

statements ::= /* empty */
             {:
               RESULT = new ArrayList<Statement>();
             :}
            | statements:ss statement:s
             {:
               ss.add(s);
               RESULT = ss;
             :}
            ;

statement ::= httpRequest:req
            {:
              RESULT = req;
            :}
           | httpRequest:req assertionsPlus:asserts
           {:
             RESULT = new RequestWithAssertions(req, asserts);
           :}
          ;

httpRequest ::= GET pathOrUrl:path SEMICOLON
              {:
                RESULT = new HttpRequest("GET", path, null, null);
              :}
             | DELETE pathOrUrl:path SEMICOLON
             {:
               RESULT = new HttpRequest("DELETE", path, null, null);
             :}
            | POST pathOrUrl:path LBRACE requestBlock:block RBRACE SEMICOLON
            {:
              RESULT = new HttpRequest("POST", path, block.headers, block.body);
            :}
           | PUT pathOrUrl:path LBRACE requestBlock:block RBRACE SEMICOLON
           {:
             RESULT = new HttpRequest("PUT", path, block.headers, block.body);
           :}
          ;

requestBlock ::= requestHeaders:hs body:b
               {:
                 RESULT = new RequestBlock(hs, b);
               :}
               | requestHeaders:hs
               {:
                 RESULT = new RequestBlock(hs, null);
               :}
               | body:b
               {:
                 RESULT = new RequestBlock(new ArrayList<Header>(), b);
               :}
              ;

body ::= BODY EQUALS STRING:b SEMICOLON
       {:
         RESULT = b;
       :}
      ;

/* One-or-more headers for requests */
requestHeaders ::= header:h
                 {:
                   List<Header> hs = new ArrayList<Header>();
                   hs.add(h);
                   RESULT = hs;
                 :}
                 | requestHeaders:hs header:h
                 {:
                   hs.add(h);
                   RESULT = hs;
                 :}
                 ;

/* One-or-more headers for config */
configHeaders ::= header:h
                {:
                  List<Header> hs = new ArrayList<Header>();
                  hs.add(h);
                  RESULT = hs;
                :}
                | configHeaders:hs header:h
                {:
                  hs.add(h);
                  RESULT = hs;
                :}
                ;

header ::= HEADER STRING:K EQUALS STRING:V SEMICOLON
         {:
           RESULT = new Header(K, V);
         :}
        ;

/* One-or-more assertions */
assertionsPlus ::= assertion:a
                 {:
                   List<Assertion> as = new ArrayList<Assertion>();
                   as.add(a);
                   RESULT = as;
                 :}
                 | assertionsPlus:as assertion:a
                 {:
                   as.add(a);
                   RESULT = as;
                 :}
                 ;

assertion ::= EXPECT STATUS EQUALS NUMBER:n SEMICOLON
            {:
              RESULT = new StatusAssertion(n);
            :}
           | EXPECT HEADER STRING:K EQUALS STRING:V SEMICOLON
           {:
             RESULT = new HeaderEqualsAssertion(K, V);
           :}
          | EXPECT HEADER STRING:K CONTAINS STRING:V SEMICOLON
          {:
            RESULT = new HeaderContainsAssertion(K, V);
          :}
         | EXPECT BODY CONTAINS STRING:S SEMICOLON
         {:
           RESULT = new BodyContainsAssertion(S);
         :}
        ;

pathOrUrl ::= STRING:path
            {:
              RESULT = path;
            :}
           ;

/* Helper RequestBlock is defined in ast package now */
