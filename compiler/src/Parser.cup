package parser;

import java_cup.runtime.*;
import java.util.*;
import ast.*;

parser code {:
    public static void main(String[] args) throws Exception {
        TestLangLexer lexer = new TestLangLexer(new java.io.FileReader(args[0]));
        TestLangParser parser = new TestLangParser(lexer);
        TestFile result = (TestFile) parser.parse().value;
        
        System.out.println("Parsing complete. Generating JUnit code...");
        CodeGenerator.generate(result);
    }
:};

// Terminal symbols
terminal CONFIG, BASE_URL, HEADER, LET, TEST, GET, POST, PUT, DELETE;
terminal EXPECT, STATUS, BODY, CONTAINS, EQUALS, SEMICOLON;
terminal LBRACE, RBRACE, LPAREN, RPAREN;
terminal String IDENTIFIER, STRING, VAR_REF;
terminal Integer NUMBER;

// Non-terminal symbols
non terminal TestFile testFile;
non terminal ConfigBlock configBlock;
non terminal List<Variable> variables;
non terminal Variable variable;
non terminal List<TestBlock> testBlocks;
non terminal TestBlock testBlock;
non terminal List<Statement> statements;
non terminal Statement statement;
non terminal HttpRequest httpRequest;
non terminal RequestBlock requestBlock;
non terminal List<Header> headers;
non terminal Header header;
non terminal List<Assertion> assertions;
non terminal Assertion assertion;
non terminal String pathOrUrl;
non terminal String value;

// Grammar rules
testFile ::= configBlock:config variables:vars testBlocks:tests
            {:
                RESULT = new TestFile(config, vars, tests);
            :}
          | variables:vars testBlocks:tests
            {:
                RESULT = new TestFile(null, vars, tests);
            :}
          ;

configBlock ::= CONFIG LBRACE configContent RBRACE
              {:
                RESULT = new ConfigBlock();
              :}
             ;

configContent ::= baseUrl headers
                | baseUrl
                | headers
                | /* empty */
                ;

baseUrl ::= BASE_URL EQUALS STRING:S SEMICOLON
          {:
            // Store base URL in config
          :}
         ;

headers ::= headers header
          | header
          ;

header ::= HEADER STRING:K EQUALS STRING:V SEMICOLON
         {:
           // Store header in config
         :}
        ;

variables ::= variables variable
            | variable
            | /* empty */
            {:
              RESULT = new ArrayList<Variable>();
            :}
           ;

variable ::= LET IDENTIFIER:name EQUALS value:val SEMICOLON
           {:
             RESULT = new Variable(name, val);
           :}
          ;

value ::= STRING:S
        {:
          RESULT = S;
        :}
       | NUMBER:N
       {:
         RESULT = N.toString();
       :}
      ;

testBlocks ::= testBlocks testBlock
             | testBlock
             {:
               RESULT = new ArrayList<TestBlock>();
             :}
            ;

testBlock ::= TEST IDENTIFIER:name LBRACE statements:stmts RBRACE
            {:
              RESULT = new TestBlock(name, stmts);
            :}
           ;

statements ::= statements statement
             | statement
             {:
               RESULT = new ArrayList<Statement>();
             :}
            ;

statement ::= httpRequest:req
            {:
              RESULT = req;
            :}
           | httpRequest:req assertions:asserts
           {:
             RESULT = new RequestWithAssertions(req, asserts);
           :}
          ;

httpRequest ::= GET pathOrUrl:path SEMICOLON
              {:
                RESULT = new HttpRequest("GET", path, null, null);
              :}
             | DELETE pathOrUrl:path SEMICOLON
             {:
               RESULT = new HttpRequest("DELETE", path, null, null);
             :}
            | POST pathOrUrl:path LBRACE requestBlock:block RBRACE SEMICOLON
            {:
              RESULT = new HttpRequest("POST", path, block.headers, block.body);
            :}
           | PUT pathOrUrl:path LBRACE requestBlock:block RBRACE SEMICOLON
           {:
             RESULT = new HttpRequest("PUT", path, block.headers, block.body);
           :}
          ;

requestBlock ::= headers:hs body:b
               | headers:hs
               | body:b
               | /* empty */
               {:
                 RESULT = new RequestBlock(hs, b);
               :}
              ;

body ::= BODY EQUALS STRING:b SEMICOLON
       {:
         RESULT = b;
       :}
      ;

headers ::= headers header:h
          | header:h
          {:
            RESULT = new ArrayList<Header>();
          :}
         ;

header ::= HEADER STRING:K EQUALS STRING:V SEMICOLON
         {:
           RESULT = new Header(K, V);
         :}
        ;

assertions ::= assertions assertion:a
            | assertion:a
            {:
              RESULT = new ArrayList<Assertion>();
            :}
           ;

assertion ::= EXPECT STATUS EQUALS NUMBER:n SEMICOLON
            {:
              RESULT = new StatusAssertion(n);
            :}
           | EXPECT HEADER STRING:K EQUALS STRING:V SEMICOLON
           {:
             RESULT = new HeaderEqualsAssertion(K, V);
           :}
          | EXPECT HEADER STRING:K CONTAINS STRING:V SEMICOLON
          {:
            RESULT = new HeaderContainsAssertion(K, V);
          :}
         | EXPECT BODY CONTAINS STRING:S SEMICOLON
         {:
           RESULT = new BodyContainsAssertion(S);
         :}
        ;

pathOrUrl ::= STRING:path
            {:
              RESULT = path;
            :}
           ;

// Helper class for request blocks
class RequestBlock {
    public List<Header> headers;
    public String body;
    
    public RequestBlock(List<Header> headers, String body) {
        this.headers = headers != null ? headers : new ArrayList<Header>();
        this.body = body;
    }
}